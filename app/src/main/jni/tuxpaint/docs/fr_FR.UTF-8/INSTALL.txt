                                   Tux Paint
                                 version 0.9.27
                        Documentation sur l'installation

      Copyright &copie; 2002-2021 par divers contributeurs; voir AUTHORS.
                            http://www.tuxpaint.org/

                               septembre 17, 2021

     ----------------------------------------------------------------------

   +--------------------------------------------------------+
   |Table des matières                                      |
   |--------------------------------------------------------|
   |  * Exigences                                           |
   |       * Biliothèque Simple DirectMedia Layer (libSDL)  |
   |       * Autres bibliothèques                           |
   |  * Compilation et installation                         |
   |       * Utilisateurs de Windows                        |
   |       * Utilisateurs de Linux/Unix                     |
   |       * Utilisateurs de macOS                          |
   |  * Débogage                                            |
   |  * Désinstallation de Tux Paint                        |
   |       * Windows                                        |
   |       * macOS                                          |
   |       * Linux                                          |
   +--------------------------------------------------------+

     ----------------------------------------------------------------------

Exigences

  Biliothèque Simple DirectMedia Layer (libSDL)

       Tux Paint nécessite la bibliothèque de couches DirectMedia simple
       (libSDL), une bibliothèque de programmation multimédia Open Source
       disponible sous la Licence publique générale limitée GNU (LGPL).

       Avec libSDL, Tux Paint dépend d'un certain nombre d'autres
       bibliothèques 'd'aide' SDL : SDL_Image (pour les fichiers graphiques),
       SDL_gfx (pour certaines fonctions graphiques, comme la rotation),
       SDL_TTF et (en option) SDL_Pango (pour la prise en charge des polices
       True Type) et, éventuellement, SDL_Mixer (pour les effets sonores).

    Utilisateurs de Linux/Unix :

         Les bibliothèques SDL sont disponibles en tant que code source, ou
         en tant que paquets RPM ou Debian pour diverses distributions de
         Linux. Ils peuvent être téléchargés à partir de :

           * libSDL: http://www.libsdl.org/
           * SDL_Image: http://www.libsdl.org/projects/SDL_image/
           * SDL_gfx:
             https://www.ferzkopp.net/wordpress/2016/01/02/sdl_gfx-sdl2_gfx/
             (https://sourceforge.net/projects/sdlgfx/)
           * SDL_TTF: http://www.libsdl.org/projects/SDL_ttf/
           * SDL_Pango: http://sourceforge.net/projects/sdlpango/ (optionnel)
           * SDL_Mixer: http://www.libsdl.org/projects/SDL_mixer/ (optionnel)

         Elles sont aussi parmi les paquets inclus dans votre distribution
         (par ex. sur le media d'installation, ou via la maintenance de vos
         logiciels comme la commande apt de Debian).

         Remarque ;lors de l'installation à partir de packages, assurez-vous
         d'installer AUSSI les versions de développement des paquets (Par ex.
         installez les deux "SDL-1.2.4.rpm" et "SDL-1.2.4-devel.rpm".)

  Autres bibliothèques

       Tux Paint profite également d'un certain nombre d'autres bibliothèques
       gratuites LGPL. Sous Linux, tout comme SDL, ils devraient être soit
       déjà installées, soit facilement disponibles avec votre distribution
       Linux.

    libPNG

         Tux Paint utilise le format PNG (Portable Network Graphics) pour ses
         fichiers de données. SDL_image nécessitera l'installation de libPNG.

         http://www.libpng.org/pub/png/libpng.html

    gettext

         Tux Paint utilise les paramètres régionaux de votre système avec la
         bibliothèque "gettext" pour prendre en charge plusieurs langues (par
         exemple, l'espagnol). Vous aurez besoin d'installer la bibliothèque
         de gettext.

         http://www.gnu.org/software/gettext/

    libpaper (Linux/Unix uniquement)

         Depuis Tux Paint 0.9.17, Tux Paint peut déterminer le format de
         papier par défaut (par exemple, A4 ou Lettre), ou peut être invité à
         utiliser un format particulier, ceci grâce à libpaper.

         https://github.com/naota/libpaper

    FriBiDi

         Les outils "Texte" et "Étiquette" de Tux Paint supportent les
         langues bidirectionnelles, grâce à la bibliothèque "FriBidi".

         http://fribidi.org/

    Support des graphismes SVG

         À partir de Tux Paint 0.9.17, Tux Paint peut prendre en charge les
         images SVG (Scalable Vector Graphics) pour les tampons. Deux
         ensembles de bibliothèques sont pris en charge et le support SVG
         peut être complètement désactivé (via "make SVG_LIB:==")

      librsvg-2 & libCairo2 (nouvelles bibliothèques)

           * libRSVG 2: http://librsvg.sourceforge.net/
           * Cairo 2: http://www.cairographics.org/
           * Celles-ci dépendent aussi de :
                * GdkPixbuf & GLib: http://www.gtk.org/
                * Pango: http://www.pango.org/

      Anciennes bibliothèques

           * libcairo1, libsvg1, & libsvg-cairo1:
             http://www.cairographics.org/
           * Celles-ci dépendent aussi de :
                * libxml2: https://gitlab.gnome.org/GNOME/libxml2

    Fonction d'exportation de GIF animés

         Pour prendre en compte l'exportation de GIF animés (diaporama), la
         bibliothèque "libimagequant" (issue du projet "pngquant" est
         nécessaire.

         https://github.com/ImageOptim/libimagequant

    Outils NetPBM (optionnel) ne sont plus utilisés par défaut

         Sous Linux et Unix, les anciennes versions de Tux Paint utilisaient
         les outils NetPBM comme aide à l'impression. (Un PNG est généré par
         TuxPaint et converti en PostScript en utilisant en ligne de commande
         les outils NetPBM pngtopnm et pnmtops.)

         http://netpbm.sourceforge.net/

     ----------------------------------------------------------------------

Compilation et installation

     Tux Paint est publié sous la licence publique générale GNU (GPL) (voir
     "COPYING.txt" pour plus de détails), et donc le 'code source' du
     programme est disponible gratuitement.

  Utilisateurs de Windows

     octobre 25, 2020 Shin-ichi TOYAMA shin1@wmail.plala.or.jp
     <shin1@wmail.plala.or.jp>

    Réglages pour compilation

         Depuis février 2005 (à partir de Tux Paint 0.9.15), le "Makefile"
         inclut la prise en charge de la construction sur un système Windows
         à l'aide de MinGW/MSYS (https://sourceforge.net/projects/msys2/).

         Beaucoup d'outils et de bibliothèques sont nécessaires pour élaborer
         Tux Paint. Le système de gestion de paquet "pacman" apporte une aide
         pour installer automatiquement, en résolvant les dépendances
         nombreuses.

         Téléchargez le dernier environnement MSYS2 à partir de
         https://sourceforge.net/projects/msys2/files/Base/ et installez-le
         où vous voulez (par défaut "C:\msys64")

         Ouvrez le shell MSYS2 via le "Menu de Démarrage" ->"MSYS2 64bit" ->
         "MSTS2 MSYS" et exécutez la commande suivante (pressez [Entrée] ou
         [Retour] pour accepter par défaut toutes les questions) :

           pacman -Syu

         Ceci mettra à jour tout le système et la fenêtre de se fermera
         automatiquement. Répétez les étapes précédentes encore une fois pour
         finaliser le process restant de mise à jour.

         Sous le shell MSYS2, exécutez la commande suivante pour installer
         outils basiques pour le développement :

           pacman -S base-devel msys2-devel git

       Allez à la prochaine section "chaînes d'outils MinGW 64bit (x86_64) ",
       ou bien à la section "chaînes d'outils MinGW 32bit (i686)" si vous ne
       voulez qu'un environnement de travail 32bit.

            -------------------------------------------------------

    Chaînes d'outils MinGW 64bit (x86_64)

         Sous le shell MSYS2, exécutez la commande suivante pour installer
         outils basiques pour le développement 64bit :

           pacman -S mingw-w64-x86_64-toolchain

    bibliothèques de dépendance 64bit (x86_64) pour Tux Paint

         Vous pouvez installer les outils et bibliothèques nécessaires pour
         la compilation de Tux Paint sur MSYS2/MINGW en utilisant "pacman",
         sauf pour SDL_Pango et SDL_gfx.

         "ntldd" est un petit outil qui examine les fichiers exécutables de
         windows en vue de lister les fichiers DLL (.dll) qui leur sont
         nécessaires. Le process de fabrication de Tux Paint pour fournir des
         fichiers binaires s'en sert pour trouver les fichiers .dll requis.

         FLTK est un ensemble d'outils multiplateforme utilisé par "Tux Paint
         Config.". Vous pouvez ne pas l'installer si vous compilez seulement
         "Tux Paint".

           $ pacman -S mingw-w64-x86_64-SDL_{image,mixer,ttf}
           $ pacman -S mingw-w64-x86_64-librsvg
           $ pacman -S mingw-w64-x86_64-fribidi
           $ pacman -S mingw-w64-x86_64-libimagequant
           $ pacman -S mingw-w64-x86_64-fltk
           $ pacman -S mingw64/mingw-w64-x86_64-ntldd-git

         Nota : Fermez l'interpréteur de commandes avant de passer à la
         suite.

    Installer SDL_Pango et SDL_gfx pour l'environnement 64bit

         SDL_Pango et SDL_gfx doivent être installés manuellement.

         Cette fois-ci, utilisez le shell MinGW "64bit". Ouvrez le shell
         depuis le "Menu de Démarrage" -> "MSYS2 64bit" -> "MSYS2 MinGW
         64-bit"

      SDL_Pango

           Tout d'abord, vous devrez préparer l'archive source et un patch
           qui est requis, dans le même répertoire.

             * Télécharger fichier source de SDL_Pango-0.1.2 depuis La page
               SDL_Pango sur Sourceforge.net.
             * Télécharger un fichier patch depuis La page web de John
               Popplewell traitant des "instructions pour la compilation de
               Tux Paint - MinGW/MSYS". (Ceci ajoute une fonctionnalité
               supplémentaire (requise) à SDL_Pango.)

           Compiler et installer SDL_Pango comme suit.

             $ tar zxvf SDL_Pango-0.1.2.tar.gz
             $ cd SDL_Pango-0.1.2/
             $ patch -p0 < ../SDL_Pango-configure-extra-api.patch
             $ ./configure --prefix=/mingw64 && make && make install

      SDL_gfx

           Télécharger fichier source de SDL_gfx-2.0.25 depuis La page
           SDL_gfx sur Sourceforge.net.

           Réinstallez SDL_gfx comme suit.

             $ tar zxvf SDL_gfx-2.0.25.tar.gz
             $ cd SDL_gfx-2.0.25
             $ ./configure --prefix=/mingw64 && make && make install

       Aller à la prochaine section "chaines d'outils MinGW 32bit (i686)", ou
       bien aller directement à la section "ImageMagick" si vous n'avez
       besoin que d'un environnement de travail 64bit.

            -------------------------------------------------------

    Chaînes d'outils MinGW 32bit (i686)

         Sous le shell MSYS2, exécutez la commande suivante pour installer
         outils basiques pour le développement 32bit :

           pacman -S mingw-w64-i686-toolchain

    bibliothèques de dépendance 32bit (i686) pour Tux Paint

         Vous pouvez installer les outils et bibliothèques nécessaires pour
         la compilation de Tux Paint sur MSYS2/MINGW en utilisant "pacman",
         sauf pour SDL_Pango et SDL_gfx.

         "ntldd" est un petit outil qui examine les fichiers exécutables de
         windows en vue de lister les fichiers DLL (.dll) qui leur sont
         nécessaires. Le process de fabrication de Tux Paint pour fournir des
         fichiers binaires s'en sert pour trouver les fichiers .dll requis.

         FLTK est un ensemble d'outils multiplateforme utilisé par "Tux Paint
         Config.". Vous pouvez ne pas l'installer si vous compilez seulement
         "Tux Paint".

           $ pacman -S mingw-w64-i686-SDL_{image,mixer,ttf}
           $ pacman -S mingw-w64-i686-librsvg
           $ pacman -S mingw-w64-i686-fribidi
           $ pacman -S mingw-w64-i686-libimagequant
           $ pacman -S mingw-w64-i686-fltk
           $ pacman -S mingw-w64-i686-ntldd-git

         Nota : Fermez l'interpréteur de commandes avant de passer à la
         suite.

    Installer SDL_Pango et SDL_gfx pour l'environnement 32bit

         SDL_Pango et SDL_gfx doivent être installés manuellement.

         Cette fois-ci, utilisez le shell MinGW "32bit". Ouvrez le shell
         depuis le "Menu de Démarrage" -> "MSYS2 64bit" -> "MSYS2 MinGW
         32-bit"

      SDL_Pango

           Tout d'abord, vous devrez préparer l'archive source et un patch
           qui est requis, dans le même répertoire.

             * Télécharger fichier source de SDL_Pango-0.1.2 depuis La page
               SDL_Pango sur Sourceforge.net.
             * Télécharger un fichier patch depuis La page web de John
               Popplewell traitant des "instructions pour la compilation de
               Tux Paint - MinGW/MSYS". (Ceci ajoute une fonctionnalité
               supplémentaire (requise) à SDL_Pango.)

           Compiler et installer SDL_Pango comme suit.

             $ tar zxvf SDL_Pango-0.1.2.tar.gz
             $ cd SDL_Pango-0.1.2/
             $ patch -p0 < ../SDL_Pango-configure-extra-api.patch
             $ ./configure --prefix=/mingw32 && make && make install

      SDL_gfx

           Télécharger fichier source de SDL_gfx-2.0.25 depuis La page
           SDL_gfx sur Sourceforge.net.

           Réinstallez SDL_gfx comme suit.

             $ tar zxvf SDL_gfx-2.0.25.tar.gz
             $ cd SDL_gfx-2.0.25
             $ ./configure --prefix=/mingw32 && make && make install

            -------------------------------------------------------

    ImageMagick

         ImageMagick est un ensemble d'outils en ligne de commande pour
         créer, éditer, composer ou convertir des images bitmap, et qui
         supporte un grand nombre de formats d'image. Tux Paint utilise deux
         fonctions ("convert" et "composite") pour générer des vignettes pour
         les images de démarrage et des modèles durant le process de
         compilation.

         L'utilisation des binaires officiels tirés de "Versions binaires
         pour Windows" est recommandée car les commandes installées avec
         "pacman" sur MinGW/MSYS ne fonctionnent pas comme elles devraient !

         N'oubliez pas de cocher "Installer les utilitaires hérités (par ex.
         convert)" pour l'installation, car le processus de compilation de
         Tux Paint les utilise.

         Ajoutez le chemin où ImageMagick est installé au début de votre
         variable d'environnement "PATH". Par exemple :

           $ export PATH=/c/Program\ Files/ImageMagick-7.0.10-Q16-HDRI:$PATH

         Vous pouvez rendre ceci permanent en ajoutant ce qui précède à votre
         fichier de configuration du shell BASH, "~/.bash_profile".

            -------------------------------------------------------

    Tux Paint

         Vous pouvez compiler des binaires 64bit en utilisant le shell MSYS2
         64bit, et des binaires 32bit en utilisant le shell MSYS2 32bit.

           * Choisissez "MSYS2 64bit" -> "MSYS2 MinGW 64-bit" dans le "Menu
             de Démarrage" pour ouvrir le shell 64bit.
           * Choisissez "MSYS2 64bit" -> "MSYS2 MinGW 32-bit" dans le "Menu
             de Démarrage" pour ouvrir le shell 32bit.

         Compilez Tux Paint avec la commande suivante :

           $ make bdist-win32

         Nota : À ce stade, vous voudrez compiler "Tux Paint Config". Pour
         Windows, il peut être ainsi inclus avec "Tux Paint", si vous faites
         une version officielle (ou de test).La compilation ira chercher un
         répertoire nommé "tuxpaint-config" (sans numéro de version, par ex
         voir "tuxpaint-config-X.Y.Z"). Voir le fichier INSTALL.txt de "Tux
         Paint Config" pour les détails.

         Tous les fichiers nécessaires pour démarrer Tux Paint (et Tux Paint
         Config) sont rassemblés dans le répertoire de la distribution
         binaire "bdist", répertoire situé sous "win323. Vous pouvez les
         démarrer en double-cliquant leurs fichiers exéctutables (.exe) dans
         le répertoire "bdist".

            -------------------------------------------------------

    Construire l'installateur de Tux Paint sous Windows :

         Inno Setup est utilisé pour construire l'installeur exécutable de
         Tux Paint. Vous devez donc l'installer en premier.

         Alors, vous pouvez facilement construire un installateur exécutable
         en cliquant-droit sur l'icône "tuxpaint.iss" du répertoires "win32"
         et sélectionner "Compile" dans la liste. Cela prendra un certain
         temps, et éventuellement vous obtiendrez un fichier
         "tuxpaint-X.Y.Z-win32-installer.exe" dans le même répertoire.

            -------------------------------------------------------

    Utiliser l'installateur de Tux Paint sous Windows :

         Double-cliquez sur l'exécutable du programme d'installation de Tux
         Paint (fichier .EXE) et suivez les instructions.

         Tout d'abord, il vous sera demandé d'accepter la licence. (Il s'agit
         de la licence publique générale GNU (GPL), qui est également
         disponible en tant que "COPYING.txt".)

         Il vous sera ensuite demandé si vous souhaitez installer des
         raccourcis à Tux Paint dans votre menu Démarrer de Windows et sur
         votre bureau Windows.(Les deux options sont définies par défaut.)

         Puis, il vous sera demandé où vous souhaitez installer Tux Paint. La
         valeur par défaut devrait convenir, tant qu'il y a de l'espace
         disponible. Sinon, choisissez un autre emplacement.

         À ce stade, vous pouvez cliquer sur «Installer» pour installer Tux
         Paint !

            -------------------------------------------------------

    Modification des paramètres à l'aide du raccourci :

         Pour modifier les paramètres du programme, cliquez avec le bouton
         droit sur le raccourci TuxPaint et sélectionnez «Propriétés» (en
         bas).

         Assurez-vous que l'onglet "Raccourci" est sélectionné dans la
         fenêtre qui apparaît et examinez le champ «Cible:». Vous devriez
         voir quelque chose comme ceci :

           "C:\Program Files\TuxPaint\TuxPaint.exe"

         Vous pouvez maintenant ajouter des options de ligne de commande qui
         seront activées lorsque vous double-cliquez sur l'icône.

         Par exemple, pour faire fonctionner le jeu en mode plein écran, avec
         des formes simples (pas d'option de rotation) et en français,
         ajoutez les options (après 'TuxPaint.exe'), comme ceci :

           "C:\Program Files\TuxPaint\TuxPaint.exe" -f -s --lang french

         (Voir «README.txt» pour une liste complète des options de ligne de
         commande disponibles.)

         Si vous faites une erreur ou que tout disparaît, utilisez [Ctrl] +
         [Z] pour annuler ou appuyez simplement sur la touche [Esc] et la
         boîte se fermera sans aucune modification (sauf si vous avez appuyé
         sur le bouton "Appliquer" !).

         Quand vous avez fini, appuyez sur "OK".

            -------------------------------------------------------

    Si quelque chose ne va pas :

         Si, lorsque vous double-cliquez sur le raccourci pour lancer le jeu,
         rien ne se passe, c'est probablement parce que certaines des options
         en lignes de commande sont erronées. Ouvrez un explorateur comme
         avant et recherchez un fichier appelé "stderr.txt" dans le dossier
         TuxPaint.

         Il contiendra une description de ce qui n'allait pas.
         Habituellement, ce sera simplement dû à une casse de caractère
         incorrecte (majuscule 'Z' à la place de 'z' minuscule) ou un '-'
         (tiret) manquant (en trop).

     ----------------------------------------------------------------------

  Utilisateurs de Linux/Unix

    Compilation :

         Remarque :Tux Paint n'utilise pas autoconf/automake, dès lors il n'y
         a pas de script "./configure" à lancer. La compilation devrait aller
         cependant aller toute seule, en supposant que Tux Paint ait tout ce
         dont il a besoin.

         Pour compiler le programme à partir des sources, lancez simplement
         la commande suivante après une invite shell (par ex. "$") :

           $ make

            -------------------------------------------------------

    Désactivation du support SVG (donc des dépendances Cairo, libSVG, et
    svg-cairo)

         Pour désactiver le support de SVG (par ex. si votre système n'a pas
         de bibliothèque Cairo, ou d'autres choses dont SVG est dépendant),
         vous pouvez exécuter "make" avec "SVG_LIB= SVG_CFLAGS=
         NOSVGFLAG=NOSVG" :

           $ make SVG_LIB= SVG_CFLAGS=

            -------------------------------------------------------

    Désactivation du support Pango (donc des dépendances Pango, Cairo, etc ...)

         Avant la version 0.9.18, Tuxpaint utilisait la bibliothèque
         libSDL_ttf pour gérer les fichiers utilisant les fontes True Type.
         Depuis la 09.18 libSDL_Pango est utilisée, car il permet un meilleur
         support pour l'internationalisation. Cependant, si vous voulez
         désactiver l'utilisation de SDL_Pango, vous pouvez le faire en
         exécutant "make" avec "SDL_PANGO_LIB=" :

           $ make SDL_PANGO_LIB=

            -------------------------------------------------------

    Désactiver le son lors de la compilation :

         Si vous n'avez pas de carte son ou si vous préférez créer le
         programme sans support sonore (et donc sans dépendance SDL_mixer),
         vous pouvez exécuter "make" avec "SDL_MIXER_LIB=" comme paramètre :

           $ make SDL_MIXER_LIB=

            -------------------------------------------------------

    Autres options :

         Diverses autres options (par exemple, les dossiers d'installation)
         peuvent être remplacées; voir dans "Makefile" pour plus de détails.

            -------------------------------------------------------

    Si vous obtenez des erreurs :

         Si vous avez des erreurs lors de la compilation, assurez-vous
         d'avoir les bibliothèques adéquates installées (voir ci-dessus). Si
         vous utilisez les versions issues des paquets des bibliothèques (par
         exemple, les RPM sous RedHat ou les DEB sous Debian), assurez-vous
         d'avoir choisi également les packages "-dev" ou "-devel"
         correspondants, sinon vous ne pourrez pas compiler Tux Paint (et
         d'autres programmes) provenant des sources !

            -------------------------------------------------------

    Installation :

         En supposant qu'aucune erreur fatale ne se soit produite, vous
         pouvez maintenant installer le programme afin qu'il puisse être
         exécuté par les utilisateurs du système. Par défaut, cela doit être
         effectué par l'utilisateur "root" ("superutilisateur"). Passer à
         "root" en tapant la commande :

           $ su

         Entrez le mot de passe de "root" à l'invite. Vous devriez maintenant
         être "root" (avec une invite comme "#"). Pour installer le programme
         et ses fichiers de données, tapez :

           # make install

         Pour finir, vous pouvez revenir sur votre compte utilisateur en
         sortant du compte superutilisateur :

           # exit

         Autre manière : vous faites simplement utilisation de la commande
         "sudo" (par ex. sur Ubuntu) :

           $ sudo make install

         Remarque :Par défaut, "tuxpaint, le programme exécutable, est placé
         en "/usr/local/bin/". Les données (images, sons, etc ...) sont dans
         "/usr/local/share/tuxpaint/".

      Changer où vont les fichiers

           Vous pouvez changer où iront les fichiers en définissant des
           variables pour "Makefile" sur la ligne de commande. "DESTDIR" est
           utilisé pour indiquer la sortie des résultats de la compilation.
           "PREFIX" est la base où tous les autres fichiers iront et est
           définie par défaut comme "/usr/local".

           Les autres variables sont :

           BIN_PREFIX
                   Où le binaire "tuxpaint" sera installé. (Par défaut
                   "$(PREFIX)/bin", par ex. "/usr/local/bin")

           DATA_PREFIX
                   Où les fichiers de données (sons, graphiques, pinceaux,
                   tampons, fontes) iront, et où Tux Paint ira les chercher
                   pour tourner (Réglé à "$(PREFIX)/share/tuxpaint")

           DOC_PREFIX
                   Où sera mise la documentation (les répertoires "docs".
                   'Réglé à "$(PREFIX)/share/doc/tuxpaint")

           MAN_PREFIX
                   Où ira la page de manuel de Tuxpaint (Réglé à
                   "$(PREFIX)/share/man")

           ICON_PREFIX — $(PREFIX)/share/pixmaps

           X11_ICON_PREFIX — $(PREFIX)/X11R6/include/X11/pixmaps

           GNOME_PREFIX — $(PREFIX)/share/gnome/apps/Graphics

           KDE_PREFIX — $(PREFIX)/share/applnk/Graphics
                   Où iront les icônes et les lanceurs (pour GNOME et KDE)

           LOCALE_PREFIX
                   Où iront les fichiers de traduction, et où Tux Paint ira
                   les chercher. (Réglé à "$(PREFIX)/share/locale/") (la
                   destination finale de la traduction sera dans le
                   répertoire de la locale (par ex "es" pour l'espagnol, dans
                   le sous-répertoire "LC_MESSAGES").

           Remarque : Cette liste est obsolète. Voir "Makefile" et
           "Makefile-i18n" pour une liste complète.

     ----------------------------------------------------------------------

  Utilisateurs de macOS

     septembre 21, 2021 Mark K. Kim <markuskimius@gmail.com>

       Tux Paint 0.9.22, et avant, devrait être construit avec Xcode IDE. À
       partir de la version 0.9.23, cependant, Tux Paint pour macOS est
       construit comme si c'était une application Linux.

    Prérequis

         Bien Tux Paint puisse être construit sans Xcode IDE, ce dernier est
         toujours nécessaire. Téléchargez le = partir de l' the App Store, et
         lancez le une fois pour accepter ses accords de licence. Vous pouvez
         aussi installer les outils de ligne de commande de Xcode en tapant
         la commande :

           xcode-select --install

         Construire Tux Paint nécessite plusieurs bibliothèques. Nous les
         installons à partir de MacPorts quand c'est possible, sinon à partir
         du code source. Installez MacPorts avec le chemin par défaut
         /opt/local suivant les instructions données sur leur site :
         https://www.macports.org/
           * ImageMagick
           * cairo
           * fribidi
           * lbzip2
           * libimagequant^*
           * libpaper
           * libpng
           * librsvg
           * libsdl
           * libsdl_image
           * libsdl_mixer
           * libsdl_pango
           * libsdl_ttf
           * libsdl_gfx
           * pkgconfig
           * zlib
         ... mais vous devriez installer tout paquet requis par la dernière
         version de Tux Paint.

         ^* Non disponible depuis MacPorts à ce moment, voir ci-dessous.

      libimagequant

           libimagequant n'est pas disponible sur MacPorts à cette heure. Il
           peut être installé sur /opt/local (comme pour MacPorts) pour la
           bibliothèque devant être incluse dans TuxPaint.dmg.

             $ git clone https://github.com/ImageOptim/libimagequant.git
             $ cd libimagequant
             $ ./configure --prefix=/opt/local
             $ make
             $ sudo make install

         ATTENTION :Posséder des outils Unix à côté de MacPorts et Xcode,
         tels que Fink ou Brew, vous empêchera de créer un programme
         portable. V"rifiez que Fink et Brew ne soient pas accessibles via
         votre environnement de travail.

            -------------------------------------------------------

    Comment construire

         Tapez simplement :

           % make
           % make install

         ... pour crée l'application TuxPaint.app qui peut être exécutée sur
         place ou copiée sur /Applications. Il crée également TuxPaint.dmg
         pour la distribution.

            -------------------------------------------------------

    Problèmes connus

           * Un binaire macOS construit sur une version spécifique de macOS
             ne fonctionnera qu'avec cette version, ou une plus récente. Pour
             s'assurer que Tux Paint puisse tourner sur la plus vieille
             version de macOS possible, construisez le sur la plus vieille
             version de macOS disponible. Au moment où nous écrivons Tux
             Paint ne peut être construit pour tourner sur macOS 10.7 ou plus
             récent.

             Voyez "Vieilles Versions de macOS" ci-dessous pour les
             meilleures instructions pour obtenir, installer et construire
             Tux Paint sur des vieilles versions de macOS.

            -------------------------------------------------------

    Vieilles versions de macOS

         Quelques vieilles versions de macOS peuvent être téléchargées sur la
         page d'aide d'Apple : https://support.apple.com/en-us/HT211683

         macOS permet de booter sur plusieurs versions de l'OS, mais c'est
         préférable et plus facile d'installer le vieux macOS sur une clé.
         Quelque soit la l'endroit où vous l'installer, le partitionnement du
         disque et le type de partition doivent correspondre à ce qu'attend
         l'ancien macOS, dès lors utilisez l'utilitaire de partitionnement et
         le format de la clé en accord avec ceci.

         À ce moment, l'ancienne version de macOS disponible sur le site
         d'Apple est la Yosemite 10.10, qui un partitionnement "GPT (GUID
         Partition Table)" au lieu de MBR, et "Mac OS Extended (Journalisé)"
         comme type de partition au lieu du nouveau type APFS.

         Au lancement de l'installateur, si vous avez un message disant que
         macOD est trop vieux ou trop récent pour être installé, un
         installateur bootable peut être créé en suivant les instructions
         données ici : https://support.apple.com/en-mide/HT201372

         Il apparaît que macOS peut être installé sur le media bootable
         lui-même, dès lors vous pouvez flasher l'installeur bootable et
         mettre le vieux macOS sur ce même média.

         Une fois l'ancienne version de macOS installée, vous pouvez trouver
         que le Xcode du App Store est trop récent pour tourner sur la
         version du vieux macOS. Des anciennes versions de Xcode peuvent être
         téléchargées sur le site des développeurs d'Apple dans une zone
         accessible après enregistrement gratuit :
         https://developer.apple.com/download/more/

         La liste des versions de macOS et de la dernière version de Xcode
         compatible avec celle-ci a été gentiment mise sur la page Wikipedia
         sur Xcode : https://en.wikipedia.org/wiki/Xcode#Table de comparaison
         des versions

         Comme Xcode a été installé manuellement, vous pouvez sauter l'étape
         d'installation des outils de commande en terminal (ne pas exécuter
         "xcode-select --install") mais alors vous compilez Tux Paint en
         utilisant les mêmes étapes décrites auparavant dans ce document.

     ----------------------------------------------------------------------

Débogage

     Le débogage — vers "STDOUT", avec Linux et Unix, vers un fichier
     "stdout.txt"avec Windows, et vers le fichier "/tmp/tuxpaint.log" avec
     macOS — peut être activé en définissant "DEBUG" (et, si un mode verbeux
     est souhaité, "VERBOSE") # define dans "src/debug.h, et en (re)compilant
     Tux Paint.

     ----------------------------------------------------------------------

Désinstallation de Tux Paint

  Windows

    Utilisation du désinstalleur

         Si vous avez installé les raccourcis du menu Démarrer (par défaut),
         accédez au dossier TuxPaint et sélectionnez "Désinstaller". Une
         boîte s'affichera qui confirme que vous êtes sur le point de
         désinstaller Tux Paint et, si vous en êtes certain et que vous
         souhaitez supprimer définitivement Tux Paint, cliquez sur le bouton
         'Désinstaller'.

         Quand c'est fini, cliquez sur "Fermer".

    En utilisant le panneau de configuration

         Il est également possible d'utiliser l'entrée "TuxPaint (supprimer
         uniquement)" dans la Section Ajout / Suppression de programmes du
         Panneau de configuration.

     ----------------------------------------------------------------------

  macOS

       Enlevez "TuxPaint.app" du dossier "Applications". Les fichiers de
       données les fichiers de configuration, les tampons et les images
       sauvegardées peuvent être trouvées dans "Bibliothèque/Support
       d'Application/Tux Paint" (pour tous les utilisateurs) et
       "/Users/USERNAME/Library/Application Support/TuxPaint" pour les
       utilisateurs individuels.

     ----------------------------------------------------------------------

  Linux

       Dans le répertoire source de Tux Paint (où vous avez compilé Tux
       Paint), vous pouvez utiliser une cible "make uninstall" pour
       désinstaller Tux Paint. Par défaut, cela doit être fait par
       l'utilisateur "root" ("superutilisateur"), mais si vous avez installé
       Tux Paint à un autre endroit (par ex. en mettant "PREFIX=..." à "make"
       et "make install", vous ne pourrez pas, et il faudra fournir les mêmes
       réglages ici. (Voir <a href="#compiling-linux>les instructions
       d'installation ci-dessus pour plus d'informations.)
