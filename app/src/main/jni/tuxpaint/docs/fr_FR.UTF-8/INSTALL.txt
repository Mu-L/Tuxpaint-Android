                                   Tux Paint
                                version 0.9.32
                       Documentation sur l'installation

       Copyright ¬© 2002-2023 by divers contributeurs; voir AUTHORS.txt.
                             https://tuxpaint.org/

                                 mai 13, 2023

+-------------------------------------------------------+
|                  Table des mati√®res                   |
|-------------------------------------------------------|
|   * Exigences                                         |
|       + Bilioth√®que Simple DirectMedia Layer (libSDL) |
|       + Autres biblioth√®ques                          |
|   * Compilation et installation                       |
|       + Windows                                       |
|       + Linux/Unix                                    |
|       + macOS                                         |
|       + Android                                       |
|       + Haiku                                         |
|   * D√©bogage                                          |
|   * D√©sinstallation de Tux Paint                      |
|       + Windows                                       |
|       + macOS                                         |
|       + Linux                                         |
+-------------------------------------------------------+

Exigences

Bilioth√®que Simple DirectMedia Layer (libSDL)

Tux Paint n√©cessite la biblioth√®que de couches DirectMedia simple (libSDL), une
biblioth√®que de programmation multim√©dia Open Source disponible sous la Licence
publique g√©n√©rale limit√©e GNU (LGPL).

Avec libSDL, Tux Paint d√©pend d'un certain nombre d'autres biblioth√®ques
'd'aide' SDL : SDL_Image (pour les fichiers graphiques), SDL_gfx (pour
certaines fonctions graphiques, comme la rotation), SDL_TTF et SDL_Pango (pour
la prise en charge des polices True Type) et, √©ventuellement, SDL_Mixer (pour
les effets sonores).

Les biblioth√®ques SDL sont disponibles en tant que code source, ou en tant que
paquets RPM ou Debian pour diverses distributions de Linux. Ils peuvent √™tre
t√©l√©charg√©s √† partir de :

  * libSDL: http://www.libsdl.org/
  * SDL_image: https://github.com/libsdl-org/SDL_image
  * SDL_gfx: https://www.ferzkopp.net/wordpress/2016/01/02/sdl_gfx-sdl2_gfx/ (
    https://sourceforge.net/projects/sdlgfx/)
  * SDL_ttf: https://github.com/libsdl-org/SDL_ttf
  * SDL2_Pango: https://github.com/markuskimius/SDL2_Pango
  * SDL_mixer: https://github.com/libsdl-org/SDL_mixer (optionnel)

Elles sont aussi parmi les paquets inclus dans votre distribution (par ex. sur
le media d'installation, ou via la maintenance de vos logiciels comme la
commande apt de Debian).

üí° Remarque :Lors de l'installation √† partir de paquets, assurez-vous
d'installer AUSSI les versions de d√©veloppement des paquets (Par ex. installez
les deux "SDL2-2.24.0.rpm" et "SDL2-2.24.0-devel.rpm".)

Autres biblioth√®ques

Tux Paint profite √©galement d'un certain nombre d'autres biblioth√®ques
gratuites LGPL. Sous Linux, tout comme SDL, ils devraient √™tre soit d√©j√†
install√©es, soit facilement disponibles avec votre distribution Linux.

libPNG

    Tux Paint utilise le format PNG (Portable Network Graphics) pour ses
    fichiers de donn√©es. SDL_image n√©cessitera l'installation de libPNG.

    http://www.libpng.org/pub/png/libpng.html



gettext

    Tux Paint utilise les param√®tres r√©gionaux de votre syst√®me avec la
    biblioth√®que "gettext" pour prendre en charge plusieurs langues (par
    exemple, l'espagnol). Vous aurez besoin d'installer la biblioth√®que de
    gettext.

    http://www.gnu.org/software/gettext/



libpaper (Linux/Unix uniquement)

    Depuis Tux Paint 0.9.17, Tux Paint peut d√©terminer le format de papier par
    d√©faut (par exemple, A4 ou Lettre), ou peut √™tre invit√© √† utiliser un
    format particulier, ceci gr√¢ce √† libpaper.

    https://github.com/naota/libpaper



FriBiDi

    Les outils "Texte" et "√âtiquette" de Tux Paint supportent les langues
    bidirectionnelles, gr√¢ce √† la biblioth√®que "FriBidi".

    http://fribidi.org/



Support des graphismes SVG

    √Ä partir de Tux Paint 0.9.17, Tux Paint peut prendre en charge les images
    SVG (Scalable Vector Graphics) pour les tampons. Deux ensembles de
    biblioth√®ques sont pris en charge et le support SVG peut √™tre compl√®tement
    d√©sactiv√© (via "make SVG_LIB:==")

    librsvg-2 & libCairo2 (nouvelles biblioth√®ques)
          o libRSVG 2: http://librsvg.sourceforge.net/
          o Cairo 2: http://www.cairographics.org/
          o Celles-ci d√©pendent aussi de :
              # GdkPixbuf & GLib: http://www.gtk.org/
              # Pango: http://www.pango.org/


    Anciennes biblioth√®ques
          o libcairo1, libsvg1, & libsvg-cairo1: http://www.cairographics.org/
          o Celles-ci d√©pendent aussi de :
              # libxml2: https://gitlab.gnome.org/GNOME/libxml2





Fonction d'exportation de GIF anim√©s

    Pour prendre en compte l'exportation de GIF anim√©s (diaporama), la
    biblioth√®que "libimagequant" (issue du projet "pngquant" est n√©cessaire.

    https://github.com/ImageOptim/libimagequant



Outils NetPBM (optionnel) Ne sont plus utilis√©s par d√©faut

    üìú Sous Linux et Unix, les anciennes versions de Tux Paint utilisaient les
    outils NetPBM comme aide √† l'impression. (Un PNG est g√©n√©r√© par TuxPaint et
    converti en PostScript en utilisant en ligne de commande les outils NetPBM
    pngtopnm et pnmtops.)

    http://netpbm.sourceforge.net/




Compilation et installation

Tux Paint est publi√© sous la licence publique g√©n√©rale GNU (GPL) (voir
"COPYING.txt" pour plus de d√©tails), et donc le 'code source' du programme est
disponible gratuitement.

    -----------------------------------------------------------------------

Windows

juillet 10, 2022 Shin-ichi TOYAMA <dolphin6k@wmail.plala.or.jp>

R√©glages pour compilation

Depuis f√©vrier 2005 (√† partir de Tux Paint 0.9.15), le "Makefile" inclut la
prise en charge de la construction sur un syst√®me Windows √† l'aide de MinGW/
MSYS (https://sourceforge.net/projects/msys2/).

Beaucoup d'outils et de biblioth√®ques sont n√©cessaires pour √©laborer Tux Paint.
Le syst√®me de gestion de paquet "pacman" apporte une aide pour installer
automatiquement, en r√©solvant less nombreuses d√©pendances.

MYSYS2

T√©l√©chargez le dernier environnement MSYS2 √† partir de https://www.msys2.org/
et installez-le o√π vous voulez (par d√©faut "C:\msys64")

Ouvrez le shell MSYS2 via le "Menu de D√©marrage" ‚Üí;"MSYS2 64bit" -‚Üí "MSTS2
MSYS" et ex√©cutez la commande suivante :

    $ yes "" | pacman -Syu

Ceci mettra √† jour tout le syst√®me et la fen√™tre se fermera automatiquement.
Ouvrez le shell msys2 de nouveau et ex√©cutez la commande suivante pour
finaliser le process restant de mise √† jour.

    $ yes "" | pacman -Syu

Sous le shell MSYS2, ex√©cutez la commande suivante pour installer outils
basiques pour le d√©veloppement :

    $ yes "" | pacman -S make automake-wrapper autoconf-wrapper libtool git zip
    patch gperf dos2unix

Allez √† la prochaine section "cha√Ænes d'outils MinGW 64bit (x86_64) ", ou bien
√† la section "cha√Ænes d'outils MinGW 32bit (i686)" si vous ne voulez qu'un
environnement de travail 32bit.

          -----------------------------------------------------------

Compilateur MinGW 64bit (x86_64) et outils

Sous le shell MSYS2, ex√©cutez la commande suivante pour installer compilateur
64bit et outils basiques de d√©veloppement :

    $ yes "" | pacman -S mingw-w64-x86_64-{gcc,pkgconf,ntldd-git}

"ntldd" est un petit outil qui examine les fichiers ex√©cutables de windows en
vue de lister les fichiers DLL (.dll) qui leur sont n√©cessaires. Le process de
fabrication de Tux Paint pour fournir des fichiers binaires s'en sert pour
trouver les fichiers .dll requis.

biblioth√®ques de d√©pendance 64bit (x86_64) pour Tux Paint et Tux Paint Config

Vous pouvez installer les outils et biblioth√®ques n√©cessaires pour la
compilation de Tux Paint et de Tux Paint Config sur MSYS2/MINGW en utilisant
"pacman", sauf pour SDL2_Pango et libunibreak.

FLTK est un ensemble d'outils multiplateforme utilis√© par "Tux Paint Config".
Vous pouvez ne pas l'installer si vous compilez seulement "Tux Paint".

    $ pacman -S mingw-w64-x86_64-SDL_{image,ttf,gfx}
    $ pacman -S mingw-w64-x86_64-{librsvg,fribidi,libimagequant,fltk}

üí° Nota : Fermez l'interpr√©teur de commandes avant de passer √† la suite.

Installer SDL2_Pango et libunibreak pour l'environnement 64bit

SDL2_Pango et libunibreak doivent √™tre install√©s manuellement.

Cette fois-ci, utilisez le shell MinGW "64bit". Ouvrez le shell depuis le "Menu
de D√©marrage" ‚Üí "MSYS2 64bit" ‚Üí "MSYS2 MinGW 64-bit"

SDL2_Pango

Vous pouvez r√©cup√©rer le code source sur le d√©p√¥t git de Mark K. Kim, compiler
et installer comme suit.

    $ git clone https://github.com/markuskimius/SDL2_Pango
    $ cd SDL2_Pango
    $ ./configure --prefix=/mingw64 && make && make install

libunibreak

libunibreak est n√©cessaire pour compiler Tux Paint Config. Vous pouvez ne pas
l'installer si vous compilez seulement "Tux Paint".

Vous pouvez r√©cup√©rer le code source depuis le d√©p√¥t git et le compiler comme
suit.

    $ git clone https://github.com/adah1972/libunibreak libunibreak
    $ cd libunibreak
    $ ./augogen.sh --prefix=/mingw64 && make && make install

Aller √† la prochaine section "chaines d'outils MinGW 32bit (i686)", ou bien
aller directement √† la section "ImageMagick" si vous n'avez besoin que d'un
environnement de travail 64bit.

          -----------------------------------------------------------

Compilateur MinGW 32bit (i686) et outils

Sous le shell MSYS2, ex√©cutez la commande suivante pour installer compilateur
32bit et outils basiques de d√©veloppement :

    $ yes "" | pacman -S mingw-w64-i686-{gcc,pkgconf,ntldd-git}

"ntldd" est un petit outil qui examine les fichiers ex√©cutables de windows en
vue de lister les fichiers DLL (.dll) qui leur sont n√©cessaires. Le process de
fabrication de Tux Paint pour fournir des fichiers binaires s'en sert pour
trouver les fichiers .dll requis.

biblioth√®ques de d√©pendance 32bit (i686) pour Tux Paint et Tux Paint Config

Vous pouvez installer les outils et biblioth√®ques n√©cessaires pour la
compilation de Tux Paint et de Tux Paint Config sur MSYS2/MINGW en utilisant
"pacman", sauf pour SDL2_Pango et libunibreak.

FLTK est un ensemble d'outils multiplateforme utilis√© par "Tux Paint Config".
Vous pouvez ne pas l'installer si vous compilez seulement "Tux Paint".

    $ pacman -S mingw-w64-i686-SDL_{image,ttf,gfx}
    $ pacman -S mingw-w64-i686-{librsvg,fribidi,libimagequant,fltk}

üí° Nota : Fermez l'interpr√©teur de commandes avant de passer √† la suite.

Installer SDL2_Pango et libunibreak pour l'environnement 32bit

SDL2_Pango et libunibreak doivent √™tre install√©s manuellement.

Cette fois-ci, utilisez le shell MinGW "32bit". Ouvrez le shell depuis le "Menu
de D√©marrage" ‚Üí "MSYS2 64bit" ‚Üí "MSYS2 MinGW 32-bit"

SDL2_Pango

Vous pouvez r√©cup√©rer le code source sur le d√©p√¥t git de Mark K. Kim, compiler
et installer comme suit.

    $ git clone https://github.com/markuskimius/SDL2_Pango
    $ cd SDL2_Pango
    $ ./configure --prefix=/mingw32 && make && make install

libunibreak

libunibreak est n√©cessaire pour compiler Tux Paint Config. Vous pouvez ne pas
l'installer si vous compilez seulement "Tux Paint".

Vous pouvez r√©cup√©rer le code source depuis le d√©p√¥t git et le compiler comme
suit.

    $ git clone https://github.com/adah1972/libunibreak libunibreak
    $ cd libunibreak
    $ ./augogen.sh --prefix=/mingw32 && make && make install

ImageMagick

ImageMagick est un ensemble d'outils en ligne de commande pour cr√©er, √©diter,
composer ou convertir des images bitmap, et qui supporte un grand nombre de
formats d'image. Tux Paint utilise deux fonctions ("convert" et "composite")
pour g√©n√©rer des vignettes pour les images de d√©marrage et des mod√®les durant
le process de compilation.

L'utilisation des binaires officiels tir√©s de "Versions binaires pour Windows"
est recommand√©e car les commandes install√©es avec "pacman" sur MinGW/MSYS ne
fonctionnent pas comme elles devraient !

N'oubliez pas de cocher "Installer les utilitaires h√©rit√©s (par ex. convert)"
pour l'installation, car le processus de compilation de Tux Paint les utilise.

Ajoutez le chemin o√π ImageMagick est install√© au d√©but de votre variable
d'environnement "PATH". Par exemple :

    $ export PATH=/c/Program\ Files/ImageMagick-7.0.10-Q16-HDRI:$PATH

Vous pouvez rendre ceci permanent en ajoutant ce qui pr√©c√®de √† votre fichier de
configuration du shell BASH, "~/.bash_profile".

Tux Paint & Tux Paint Config.

Vous pouvez compiler des binaires 64bit en utilisant le shell "MSYS2 64bit", et
des binaires 32bit en utilisant le shell "MSYS32 32bit".

  * Choisissez "MSYS2 64bit" ‚Üí "MSYS2 MinGW 64-bit" dans le "Menu de D√©marrage"
    pour ouvrir le shell 64bit.
  * Choisissez "MSYS2 64bit" ‚Üí "MSYS2 MinGW 32-bit" dans le "Menu de D√©marrage"
    pour ouvrir le shell 32bit.

Tux Paint Config.

"Tux Paint Config" est un outil graphique utile pour ajuster le comportement de
Tux Paint. Vous devez construire ce composant avant de compiler Tux Paint si
vous voulez qu'il soit inclus dans votre paquetage.

Vous pouvez utiliser soit (a) une version dans une archive tar, soit (b)
l'arbre souce en d√©veloppement.

 a. Utiliser une version tar-ball stable :
      + T√©l√©charger l'ensemble des fichiers sources
      + D√©velopper l'archive tar et changez le nom du r√©pertoire de sorte que
        le processus d'empaquetage final puisse trouver les fichiers en
        relation.

            $ tar zxvf tuxpaint-config-A.B.C.tar.gz
            $ mv tuxpaint-config-A.B.C tuxpaint-config

 b. Utiliser l'arborescence source en d√©veloppement :
      + Aller chercher l'arborescence source en d√©veloppement via le d√©p√¥t git
        :

            $ git clone https://git.code.sf.net/p/tuxpaint/tuxpaint-config
            tuxpaint-config

Maintenant vous pouvez faire Tux Paint Config. comme suit :

    $ cd tuxpaint-config
    $ make win32

Tux Paint

Vous pouvez utiliser soit (a) une version dans une archive tar, soit (b)
l'arbre souce en d√©veloppement.

 a. Utiliser une version tar-ball stable :
      + T√©l√©charger l'ensemble des fichiers sources
      + D√©velopper l'archive tar et changez le nom du r√©pertoire de sorte que
        le processus d'empaquetage final puisse trouver les fichiers en
        relation.

            $ tar zxvf tuxpaint-A.B.C.tar.gz
            $ mv tuxpaint-A.B.C tuxpaint

 b. Utiliser l'arborescence source en d√©veloppement :
      + Aller chercher l'arborescence source en d√©veloppement via le d√©p√¥t git
        :

            $ git clone https://git.code.sf.net/p/tuxpaint/tuxpaint tuxpaint

Maintenant vous pouvez faire Tux Paint comme suit :

    $ cd tuxpaint
    $ make bdist-win32

Tous les fichiers n√©cessaires pour d√©marrer Tux Paint (et Tux Paint Config)
sont rassembl√©s dans le r√©pertoire de la distribution binaire "bdist",
r√©pertoire situ√© sous "win323. Vous pouvez les d√©marrer en double-cliquant
leurs fichiers ex√©ctutables (.exe) dans le r√©pertoire "bdist".

Construire l'installateur de Tux Paint sous Windows

Inno Setup est utilis√© pour construire l'installeur ex√©cutable de Tux Paint.
Vous devez donc l'installer en premier.

Officiellement Inno Setup prend en compte des traductions dans environ 20
langues. Cependant, un des points majeurs de Tux Paint est qu'il supporte
beaucoup de langues. Aussi, le script de mise au point "tuxpaint.iss" qui sert
pour construire le programme d'installation est √©crit en beaucoup plus de
langues, y compris des non-officielles qui sont disponibles sur "Inno Setup
Translations". Vous devez t√©l√©charger les fichiers de traduction (.isl) qui
sont requis et les mettre dans le r√©pertoire "Languages" sous le r√©pertoire
dans lequel Inno Setup est install√©.

Avant de construire un programme d'installation, √©ditez le fichier
"tuxpaint.iss" et activez l'une des lignes commen√ßant par "#define BuildTarget=
", en fonction de l'architecture du programme que vous voulez cr√©er.

Alors, vous pouvez facilement construire un installateur ex√©cutable en
cliquant-droit sur l'ic√¥ne "tuxpaint.iss" du r√©pertoires "win32" et
s√©lectionner "Compile" dans la liste. Cela prendra un certain temps, et
√©ventuellement vous obtiendrez un fichier "tuxpaint-X.Y.Z-windows-<arch>
-installer.exe" dans le m√™me r√©pertoire.

Utiliser l'installateur de Tux Paint sous Windows

Double-cliquez sur l'ex√©cutable du programme d'installation de Tux Paint
(fichier .EXE) et suivez les instructions.

Tout d'abord, il vous sera demand√© d'accepter la licence. (Il s'agit de la
licence publique g√©n√©rale GNU (GPL), qui est √©galement disponible en tant que
"COPYING.txt".)

Il vous sera ensuite demand√© si vous souhaitez installer des raccourcis √† Tux
Paint dans votre menu D√©marrer de Windows et sur votre bureau Windows.(Les deux
options sont d√©finies par d√©faut.)

Puis, il vous sera demand√© o√π vous souhaitez installer Tux Paint. La valeur par
d√©faut devrait convenir, tant qu'il y a de l'espace disponible. Sinon,
choisissez un autre emplacement.

√Ä ce stade, vous pouvez cliquer sur ¬´Installer¬ª pour installer Tux Paint !

Modification des param√®tres √† l'aide du raccourci

Pour modifier les param√®tres du programme, cliquez avec le bouton droit sur le
raccourci TuxPaint et s√©lectionnez ¬´Propri√©t√©s¬ª (en bas).

Assurez-vous que l'onglet "Raccourci" est s√©lectionn√© dans la fen√™tre qui
appara√Æt et examinez le champ ¬´Cible:¬ª. Vous devriez voir quelque chose comme
ceci :

    "C:\Program Files\TuxPaint\TuxPaint.exe"

Vous pouvez maintenant ajouter des options de ligne de commande qui seront
activ√©es lorsque vous double-cliquez sur l'ic√¥ne.

Par exemple, pour faire fonctionner le jeu en mode plein √©cran, avec des formes
simples (pas d'option de rotation) et en fran√ßais, ajoutez les options (apr√®s
'TuxPaint.exe'), comme ceci :

    "C:\Program Files\TuxPaint\TuxPaint.exe" -f -s --lang french

(Voir ¬´README.txt¬ª pour une liste compl√®te des options de ligne de commande
disponibles.)

Si vous faites une erreur ou que tout dispara√Æt, utilisez [Control] + [Z] pour
annuler ou appuyez simplement sur la touche [Esc] et la bo√Æte se fermera sans
aucune modification (sauf si vous avez appuy√© sur le bouton "Appliquer" !).

Quand vous avez fini, appuyez sur "OK".

Si quelque chose ne va pas

Si, lorsque vous double-cliquez sur le raccourci pour lancer le jeu, rien ne se
passe, c'est probablement parce que certaines des options en lignes de commande
sont erron√©es. Ouvrez un explorateuet recherchez un fichier appel√© "stderr.txt"
dans votre dossier personnel de sauvegarde de TuxPaint, qui est normalement "C:
\Users\utilisateur\AppData\Roaming\TuxPaint".

Il contiendra une description de ce qui n'allait pas. Habituellement, ce sera
simplement d√ª √† une casse de caract√®re incorrecte (majuscule 'Z' √† la place de
'z' minuscule) ou un '-' (tiret) manquant (en trop).

    -----------------------------------------------------------------------

Linux/Unix

Compilation :

üí° Remarque :Tux Paint n'utilise pas autoconf/automake, d√®s lors il n'y a pas de
script "./configure" √† lancer. La compilation devrait aller cependant aller
toute seule, en supposant que Tux Paint ait tout ce dont il a besoin.

Pour compiler le programme √† partir des sources, lancez simplement la commande
suivante apr√®s une invite shell (par ex. "$") :

    $ make

D√©sactivation du support SVG (donc des d√©pendances Cairo, libSVG, et svg-cairo)

Pour d√©sactiver le support de SVG (par ex. si votre syst√®me n'a pas de
biblioth√®que Cairo, ou d'autres choses dont SVG est d√©pendant), vous pouvez
ex√©cuter "make" avec "SVG_LIB= SVG_CFLAGS= NOSVGFLAG=NOSVG" :

    $ make SVG_LIB= SVG_CFLAGS=

D√©sactiver le son lors de la compilation

Si vous n'avez pas de carte son ou si vous pr√©f√©rez cr√©er le programme sans
support sonore (et donc sans d√©pendance SDL_mixer), vous pouvez ex√©cuter "make"
avec "SDL_MIXER_LIB=" comme param√®tre :

    $ make SDL_MIXER_LIB=

Autres options

Diverses autres options (par exemple, les dossiers d'installation) peuvent √™tre
remplac√©es; voir dans "Makefile" pour plus de d√©tails.

Si vous obtenez des erreurs

Si vous avez des erreurs lors de la compilation, assurez-vous d'avoir les
biblioth√®ques ad√©quates install√©es (voir ci-dessus). Si vous utilisez les
versions issues des paquets des biblioth√®ques (par exemple, les RPM sous RedHat
ou les DEB sous Debian), assurez-vous d'avoir choisi √©galement les packages
"-dev" ou "-devel" correspondants, sinon vous ne pourrez pas compiler Tux Paint
(et d'autres programmes) provenant des sources !

Installation

En supposant qu'aucune erreur fatale ne se soit produite, vous pouvez
maintenant installer le programme afin qu'il puisse √™tre ex√©cut√© par les
utilisateurs du syst√®me. Par d√©faut, cela doit √™tre effectu√© par l'utilisateur
"root" ("superutilisateur"). Passer √† "root" en tapant la commande :

    $ su

Entrez le mot de passe de "root" √† l'invite. Vous devriez maintenant √™tre
"root" (avec une invite comme "#"). Pour installer le programme et ses fichiers
de donn√©es, tapez :

    # make install

Pour finir, vous pouvez revenir sur votre compte utilisateur en sortant du
compte superutilisateur :

    # exit

Autre mani√®re : vous faites simplement utilisation de la commande "sudo" (par
ex. sur Ubuntu) :

    $ sudo make install

üí° Remarque :Par d√©faut, "tuxpaint", le programme ex√©cutable, est plac√© en "/usr
/local/bin/". Les donn√©es (images, sons, etc ...) sont dans "/usr/local/share/
tuxpaint/".

Changer o√π vont les fichiers

Vous pouvez changer o√π iront les fichiers en d√©finissant des variables pour
"Makefile" sur la ligne de commande. "DESTDIR" est utilis√© pour indiquer la
sortie des r√©sultats de la compilation. "PREFIX" est la base o√π tous les autres
fichiers iront et est d√©finie par d√©faut comme "/usr/local".

Les autres variables sont :

BIN_PREFIX
    O√π le binaire "tuxpaint" sera install√©. (Par d√©faut "$(PREFIX)/bin", par
    ex. "/usr/local/bin")

DATA_PREFIX
    O√π les fichiers de donn√©es (sons, graphiques, pinceaux, tampons, fontes)
    iront, et o√π Tux Paint ira les chercher pour tourner (R√©gl√© √† "$(PREFIX)/
    share/tuxpaint")

DOC_PREFIX
    O√π sera mise la documentation (les r√©pertoires "docs". 'R√©gl√© √† "$(PREFIX)/
    share/doc/tuxpaint")

MAN_PREFIX
    O√π ira la page de manuel de Tuxpaint (R√©gl√© √† "$(PREFIX)/share/man")

ICON_PREFIX ‚Äî $(PREFIX)/share/pixmaps
X11_ICON_PREFIX ‚Äî $(PREFIX)/X11R6/include/X11/pixmaps
GNOME_PREFIX ‚Äî $(PREFIX)/share/gnome/apps/Graphics
KDE_PREFIX ‚Äî $(PREFIX)/share/applnk/Graphics
    O√π iront les ic√¥nes et les lanceurs (pour GNOME et KDE)

LOCALE_PREFIX
    O√π iront les fichiers de traduction, et o√π Tux Paint ira les chercher.
    (R√©gl√© √† "$(PREFIX)/share/locale/") (la destination finale de la traduction
    sera dans le r√©pertoire de la locale (par ex "es" pour l'espagnol, dans le
    sous-r√©pertoire "LC_MESSAGES").


üí° Remarque : Cette liste est obsol√®te. Voir "Makefile" et "Makefile-i18n" pour
une liste compl√®te.

    -----------------------------------------------------------------------

macOS

juin 5, 2022 Mark Kim <markuskimius@gmail.com>

√Ä partir de Tux Paint 0.9.23, Tux Paint pour macOS est construit comme si
c'√©tait une application Linux.

Pr√©requis

Bien Tux Paint puisse √™tre construit sans Xcode IDE, ce dernier est toujours
n√©cessaire. T√©l√©chargez le = partir de l' the App Store, et lancez le une fois
pour accepter ses accords de licence. Vous pouvez aussi installer les outils de
ligne de commande de Xcode en tapant la commande :

    $ xcode-select --install

Construire Tux Paint n√©cessite plusieurs biblioth√®ques. Nous les installons √†
partir de MacPorts quand c'est possible, sinon √† partir du code source.
Installez MacPorts avec le chemin par d√©faut /opt/local suivant les
instructions donn√©es sur leur site : https://www.macports.org/

  * ImageMagick
  * cairo
  * fribidi
  * lbzip2
  * libimagequant^*
  * libpaper
  * libpng
  * librsvg
  * libsdl2
  * libsdl2_image
  * libsdl2_mixer
  * libsdl2_pango^*
  * libsdl2_ttf
  * libsdl2_gfx
  * pkgconfig
  * zlib

... mais vous devriez installer tout paquet requis par la derni√®re version de
Tux Paint.

^* Non disponible depuis MacPorts √† ce moment, voir ci-dessous.

libimagequant

libimagequant n'est pas disponible sur MacPorts √† cette heure. Il peut √™tre
install√© sur /opt/local (comme pour MacPorts) pour la biblioth√®que devant √™tre
incluse dans TuxPaint.dmg.

    $ sudo port install rust cargo
    $ git clone https://github.com/ImageOptim/libimagequant.git
    $ cd libimagequant/imagequant-sys
    $ cargo build --release # On doit utiliser cargo venant de Macports
    $ sudo make PREFIX=/opt/local install

sdl2_pango

sdl2_pango n'est pas disponible sur MacPorts √† cette heure. Il peut √™tre
install√© √† partir du code source comme ce qui suit. Il doit √™tre install√© sur /
opt/local (comme pour MacPorts) pour la biblioth√®que devant √™tre incluse dans
TuxPaint.dmg.

    $ git clone https://github.com/markuskimius/SDL2_Pango.git
    $ cd SDL2_Pango
    $ ./configure --prefix=/opt/local && make && sudo make install

ATTENTION :Poss√©der des outils Unix √† c√¥t√© de MacPorts et Xcode, tels que Fink
ou Brew, vous emp√™chera de cr√©er un programme portable. V"rifiez que Fink et
Brew ne soient pas accessibles via votre environnement de travail.

Comment construire

Tapez simplement :

    % make
    % make install

... pour cr√©e l'application TuxPaint.app qui peut √™tre ex√©cut√©e sur place ou
copi√©e sur /Applications. Pour cr√©er le fichier DMG pour la distribution,
faites 'make TuxPaint.dmg'.

Des √©tapes suppl√©mentaires sont n√©cessaires pour construire un 'Universal
Binary'. Voyez "Construire un Universal Binary" ci-dessous.

Probl√®mes connus

  * Un binaire macOS construit sur une version sp√©cifique de macOS ne
    fonctionnera qu'avec cette version, ou une plus r√©cente. Pour s'assurer que
    Tux Paint puisse tourner sur la plus vieille version de macOS possible,
    construisez le sur la plus vieille version de macOS disponible. Au moment
    o√π nous √©crivons Tux Paint ne peut √™tre construit pour tourner sur macOS
    10.7 ou plus r√©cent.

    Voyez "Vieilles Versions de macOS" ci-dessous pour les meilleures
    instructions pour obtenir, installer et construire Tux Paint sur des
    vieilles versions de macOS.

    Autrement, Tux Paint et toutes les biblioth√®ques d√©pendantes peuvent √™tre
    compil√©s avec les options ad√©quates pour pouvoir tourner sur des versions
    plus anciennes de macOS. Ces options sont d√©j√† pr√™tes dans Tux paint, ainsi
    seules les d√©pendances (√† partir de macOS) doivent √™tre recompil√©es. Voir
    ci-dessous "Recompilation avec MacPorts" pour les instructions.

Vieilles versions de macOS

Quelques vieilles versions de macOS peuvent √™tre t√©l√©charg√©es sur la page
d'aide d'Apple : https://support.apple.com/en-us/HT211683

macOS avec un CPU Intel permet de booter sur plusieurs versions de l'OS, mais
c'est pr√©f√©rable et plus facile d'installer le vieux macOS sur une cl√©. Quelque
soit la l'endroit o√π vous l'installer, le partitionnement du disque et le type
de partition doivent correspondre √† ce qu'attend l'ancien macOS, d√®s lors
utilisez l'utilitaire de partitionnement et le format de la cl√© en accord avec
ceci.

Le dual boot pour plusieurs versions de macOS pour Apple Silicon a √©t√© jusqu'√†
pr√©sent sans succ√®s. Au lieu d'installer une vieille version de macOS pour
Apple Silicon pour que Tux Paint puisse tourner, utilisez les instructions que
l'on trouve dans la section "Recompiler Macports" afin que Tux Paint puisse
tourner sur des vieilles version de MacOS pour Apple Silicon.

√Ä ce moment, l'ancienne version de macOS disponible sur le site d'Apple est la
Yosemite 10.10, qui un partitionnement "GPT (GUID Partition Table)" au lieu de
MBR, et "Mac OS Extended (Journalis√©)" comme type de partition au lieu du
nouveau type APFS.

Au lancement de l'installateur, si vous avez un message disant que macOD est
trop vieux ou trop r√©cent pour √™tre install√©, un installateur bootable peut
√™tre cr√©√© en suivant les instructions donn√©es ici : https://support.apple.com/
en-mide/HT201372

Une fois l'ancienne version de macOS install√©e, vous pouvez trouver que le
Xcode du App Store est trop r√©cent pour tourner sur la version du vieux macOS.
Des anciennes versions de Xcode peuvent √™tre t√©l√©charg√©es sur le site des
d√©veloppeurs d'Apple dans une zone accessible apr√®s enregistrement gratuit :
https://developer.apple.com/download/more/

La liste des versions de macOS et de la derni√®re version de Xcode compatible
avec celle-ci a √©t√© gentiment mise sur la page Wikipedia sur Xcode : https://
en.wikipedia.org/wiki/Xcode#Table de comparaison des versions

Comme Xcode a √©t√© install√© manuellement, vous pouvez sauter l'√©tape
d'installation des outils de commande en terminal (ne pas ex√©cuter
"xcode-select --install") mais alors vous compilez Tux Paint en utilisant les
m√™mes √©tapes d√©crites auparavant dans ce document.

Recompiler MacPorts

Pour recompiler MacPorts afin d'√™tre utilis√© sur une ancienne version de macOS,
mettez les options suivantes dans /opt/local/etc/macports/macports.conf :

    buildfromsource always
    macosx_deployment_target 10.10

Ensuite d√©sinstaller tous les paquets MacPorts :

    $ sudo port -fp uninstall installed

Puis r√©installez tous les paquets MacPorts dont Tux Paint a besoin.
Reconstruisez √©galement libimagequant en utilisant le paquet Cargo √† jour
depuis MacPorts.

√Ä cet instant, toutes les biblioth√®ques que Tux Paint demande depuis MacPorts
peuvent √™tre recompil√©es de cette fa√ßon pour pouvoir tourner sur macOS 10.10
(et plus r√©cent) avec les CPU Intel, et macOS 11.0 Big Sur (et plus r√©cent)
avec Apple Silicon. Malheureusement, bien que MacPorts poss√®de une option pour
autoriser la construction de biblioth√®ques universelles, plusieurs
biblioth√®ques que demande Tux Paint ne peuvent √™tre construites comme telles,
d√®s lors elles ne sont fabriqu√©es pour tourner uniquement avec le mat√©riel sur
lequel elles ont √©t√© construites. Voir "Construire un binaire universel"
ci-dessous pour les instructions √† suivre pour faire que Tux paint soit un
Binaire Universel.

Cr√©er un Binaire Universel

Pour fabriquer Tux Paint en tant que 'Universal Binary', compilez Tux Paint
pour le CPU Intel et pour le Apple Silicon, chacun s√©par√©ment. Puis renommez
l'ensemble pour le CPU Intel en TuxPaint-x86_64.app et l'ensemble pour le Apple
Silicon en TuxPaint-arm64.app. Copiez l'ensemble app pour Intel sur la machine
Apple Silicon puis ex√©cutez le script fourni build-universal.sh pour combiner
les deux applications comme ci-dessous. Le fichier DMG, s'il est demand√©, doit
√™tre fabriqu√© apr√®s :

    $ macos/build-universal.sh
    $ make TuxPaint.dmg

    -----------------------------------------------------------------------

Android

mars 29, 2023 Pere Pujal i Carabantes <perepujal@gmail.com> (Edited by Bill
Kendrick)

En mars 2023, la version Android de Tux Paint est maintenue d√©p√¥t de logiciel
s√©par√© sur GitHub : https://github.com/tux4kids/Tuxpaint-Android. Les
instructions d√©taill√©es sont sur ce site; voici une r√©sum√©.

Pr√©requis

Vous avez besoin des versions r√©centes de :

  * Gradle ‚Äî outil de construction automatique
  * Android Studio (Software Development Kit (SDK)) ‚Äî pour supporter le
    d√©veloppement d'application Androidn(Java)
  * Android Native Development Kit (NDK) ‚Äî pour un support de d√©veloppement
    natif en C/C++

Pour compiler le dernier Tux Paint, on doit synchroniser le d√©p√¥t Git tuxpaint
du projet principal Sourceforge , avec le d√©p√¥t Git TuxPaint-Android. (Pere
utilise un script qui enregistre le r√©pertoire app/src/main/jni/tuxpaint dans
le d√©p√¥t Git Tuxpaint-Android puis qui compile Tuxpaint-Android de Sourceforge
pour g√©n√©rer les traductions et autres qui ne le sont pas dans les compilation
Android, et enfin il copie le tuxpaint de Sourceforge vers Tuxpaint-Android.)
FIXME: C'est √† v√©rifier. Voirhttps://sourceforge.net/p/tuxpaint/
feature-requests/224/)

Pour le faire tourner, vous avez besoin des sources de tuxpaint et
Tuxpaint-Android l'un √† c√¥t√© de l'autre, et le script dans le r√©pertoire qui
contient les dexu.

Remplissez le r√©pertoire app/src/main/assets en ex√©cutant cd app/src/main/jni/
tuxpaint && ./mkzip_assets.sh

Construire

La construction avec Gradle g√©n√®re quelques variants : PlayStore,
debugPlayStore, offPlayStore et debugoffPlayStore. Vous devez signer ceux qui
ne sont pas d√©bugg√©s pour pouvoir les installer.(FIXME : mettre le lien pour
montrer comment signer).(Note: ceux dans "playStore" sont destin√©s √† √™tre
transf√©r√©s dans Google Play; ceci est actuellement g√©r√© par Terrence Sheflin
‚ÄîMarch 2023. "offPlayStore" est une vari√©t√© que nous distribuons en tant que
fichiers APK sur le site de Tux Paint, et le site SourceForge, et c'est un
variant construit par le d√©p√¥t F-Droid.)

Pour d√©clencher une ex√©cution sur F-Droid, il suffit de d√©clencher un commit et
et push vers GitHub. Cele ne garantit pas que la construction aboutira, aussi
Pere utilise un serveur F-Droid local pour tester la construction et
√©ventuellement il fait des adaptations avant de faire un push vers GitHub.

Les logiciels fournis par Pere sont tous √©labor√©s avec ce server F-droid
locale. Ceci a l'avantage de mettre en paquets les soucres et les logs, et de
signer les APK. Beaucoup plus important, il utilise les m√™mes outils que
F-Droid utilise pour compiler Tux paint, et on peut ainsi d√©tecter les
probl√®mes p√©alablement.

Le processus que Pere utilise pour les constructions F-Droid est le r√©pertoire
de https://gitlab.com/fdroid/fdroiddata. Le code server F-Droid est dans https:
//gitlab.com/fdroid/fdroidserver. Pour g√©n√©rer le server vous avez besoin de 1
GB de lbre sur le disque. Faites tourner l'outil makebuildserver qui est
fourni, puis, depuis la racine de fdroiddata, ex√©cutez ../fdroidserver/fdroid
build --server org.tuxpaint:NNNN (NNNN = version, e.g. 9288)

    -----------------------------------------------------------------------

Haiku

mai 7, 2023 Luc Schrijvers <begasus@gmail.com> (Edited by Bill Kendrick)

Pr√©requis

Installez les paquets de d√©veloppement requis via un terminal :

32-bit :
    pkgman install xcairo_x86_devel fribidi_x86_devel gdk_pixbuf_x86_devel
    libiconv_x86_devel libimagequant_x86_devel gettext_x86_libintl
    libpaper_x86_devel pango_x86_devel libpng16_x86_devel librsvg_x86_devel
    libsdl2_x86_devel sdl2_image_x86_devel sdl2_gfx_x86_devel
    sdl2_mixer_x86_devel sdl2_pango_x86_devel sdl2_ttf_x86_devel zlib_x86_devel

64-bit :
    pkgman install xcairo_devel fribidi_devel gdk_pixbuf_devel libiconv_devel
    libimagequant_devel gettext_libintl libpaper_devel pango_devel
    libpng16_devel librsvg_devel libsdl2_devel sdl2_image_devel sdl2_gfx_devel
    sdl2_mixer_devel sdl2_pango_devel sdl2_ttf_devel zlib_devel


Pour 32-bit vous devez basculer vers le nouveau compilateur (actuellement gcc
11.2.0) vers setarch x86

Construire

make PREFIX=/boot/home/config/non-packaged

Tampons pour Tux Paint

make install-all DATA_PREFIX=/boot/home/config/non-packaged/share/tuxpaint/

D√©bogage

‚öô Le d√©bogage ‚Äî vers "STDOUT", avec Linux et Unix, vers un fichier
"stdout.txt"avec Windows, et vers le fichier "/tmp/tuxpaint.log" avec macOS ‚Äî
peut √™tre activ√© en d√©finissant "DEBUG" (et, si un mode verbeux est souhait√©,
"VERBOSE") # define dans "src/debug.h, et en (re)compilant Tux Paint.

D√©sinstallation de Tux Paint

Windows

Utilisation du d√©sinstalleur

Si vous avez install√© les raccourcis du menu D√©marrer (par d√©faut), acc√©dez au
dossier TuxPaint et s√©lectionnez "D√©sinstaller". Une bo√Æte s'affichera qui
confirme que vous √™tes sur le point de d√©sinstaller Tux Paint et, si vous en
√™tes certain et que vous souhaitez supprimer d√©finitivement Tux Paint, cliquez
sur le bouton 'D√©sinstaller'.

Quand c'est fini, cliquez sur "Fermer".

En utilisant le panneau de configuration

Il est √©galement possible d'utiliser l'entr√©e "TuxPaint (supprimer uniquement)"
dans la Section Ajout / Suppression de programmes du Panneau de configuration.

macOS

Enlevez "TuxPaint.app" du dossier "Applications". Les fichiers de donn√©es les
fichiers de configuration, les tampons et les images sauvegard√©es peuvent √™tre
trouv√©es dans "/Biblioth√®que/Support d'Application/Tux Paint" (pour tous les
utilisateurs) et "/Users/USERNAME/Library/Application Support/TuxPaint" pour
les utilisateurs individuels.

Linux

Dans le r√©pertoire source de Tux Paint (o√π vous avez compil√© Tux Paint), vous
pouvez utiliser une cible "make uninstall" pour d√©sinstaller Tux Paint. Par
d√©faut, cela doit √™tre fait par l'utilisateur "root" ("superutilisateur"), mais
si vous avez install√© Tux Paint √† un autre endroit (par ex. en mettant "PREFIX
=..." √† "make" et "make install", vous ne pourrez pas, et il faudra fournir les
m√™mes r√©glages ici. (Voir
